#include <iostream>
#include "Propulsion.h"

/*
class Propulsion{
    private:
        double fuelLevel;
        double lightToFuel;
        double lightLevel;
        const double MAXFUEL = 1000.0;
        const double SPEEDOFLIGHT = 299792458.0;

    public:
        Propulsion();
        Propulsion(double, double);
        bool consumeFuel(double);
        bool addFuel(double);
        void generateFuel(double);
        void setLightLevel(double);
        void report() const;
};
*/

//default constructor
Propulsion::Propulsion(){
    fuelLevel = 0.00;
    lightLevel = 0.00;
    lightToFuel = 0.00;
}

Propulsion::Propulsion(double _fuelLevel, double _lightLevel){
    fuelLevel = _fuelLevel;
    lightLevel = _lightLevel;
}

// fuel consumed according to the energy consumed by the ship
bool Propulsion::consumeFuel(double energy){
    bool retval = false;
    double fuelRequired = energy * C * C;
    if(fuelLevel > fuelRequired){
        fuelLevel -= fuelRequired;
        retval = true;
    }

    return retval;
}

//fuel generation by the propulsion system
void Propulsion::generateFuel(double time){
    lightToFuel = lightLevel * time;
}

//adding the fuel that is generated by the propulsion system
void Propulsion::addFuel(){
    double newFuelLevel = fuelLevel + lightToFuel;
    if(newFuelLevel > MAXFUEL){
        fuelLevel = MAXFUEL;
    }
    else{
        fuelLevel = newFuelLevel;
    }
}

//setter function
void Propulsion::setLightLevel(double _lightLevel){
    lightLevel = _lightLevel;
}

// Propulsion report
void Propulsion::GenerateReport() const{
    std::cout.precision(2);
    std::cout << std::fixed << "Propulsion: fuel level: " << fuelLevel  << "kg of matter/anti-matter, lightlevel:" << lightLevel << std::endl;
}
